openapi: 3.0.4
info:
  title: API Requests
  version: 1.0.0
paths:
  # Account Management
  /account:
    post:
      tags:
        - Account
      summary: Create account
      description: Create worker account
      parameters:
        - name: username
          in: query
          description: Username of account that will be created
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: Name of account that will be created
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Password of account that will be created
          required: true
          schema:
            type: string
        - name: businessId
          in: query
          description: Optional business ID to associate with the account
          required: false
          schema:
            type: integer
      responses:
        '201':
          description: Successfully created
        '400':
          description: Invalid input
    get:
      tags:
        - Account
      summary: Get accounts
      security:
        - bearerAuth: []
      description: Get all accounts (with pagination)
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size for pagination
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '403':
          description: Insufficient permissions

  /account/login:
    post:
      tags:
        - Account
      summary: Log in
      description: Log in to account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogInInfo'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '400':
          description: Invalid input
        '401':
          description: Invalid password
        '404':
          description: Account not found

  /account/{id}:
    get:
      tags:
        - Account
      summary: Get account
      security:
        - bearerAuth: []
      description: Get account information
      parameters:
        - name: id
          in: path
          description: ID of account
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '403':
          description: Insufficient permissions
        '404':
          description: Account not found
          
  # Account Role Management
  /account/role:
    post:
      tags:
        - AccountRole
      summary: Create role
      security:
        - bearerAuth: []
      description: Create a new role for business
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRole'
      responses:
        '201':
          description: Successfully created
        '400':
          description: Invalid input
        '403':
          description: Insufficient permissions
    get:
      tags:
        - AccountRole
      summary: Get roles
      security:
        - bearerAuth: []
      description: Get all roles for current business
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size for pagination
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountRole'
        '403':
          description: Insufficient permissions
          
  /account/role/{roleId}:
    get:
      tags:
        - AccountRole
      summary: Get role details
      security:
        - bearerAuth: []
      description: Get details of a specific role
      parameters:
        - name: roleId
          in: path
          description: ID of the role
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountRole'
        '403':
          description: Insufficient permissions
        '404':
          description: Role not found
    put:
      tags:
        - AccountRole
      summary: Update role
      security:
        - bearerAuth: []
      description: Update role details
      parameters:
        - name: roleId
          in: path
          description: ID of the role to update
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRole'
      responses:
        '200':
          description: Successfully updated
        '400':
          description: Invalid input
        '403':
          description: Insufficient permissions
        '404':
          description: Role not found

  # Functions Management
  /function:
    get:
      tags:
        - Function
      summary: Get all functions
      security:
        - bearerAuth: []
      description: Get all available system functions
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size for pagination
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Function'
        '403':
          description: Insufficient permissions
          
  /account/role/{roleId}/function:
    post:
      tags:
        - AccountRole
      summary: Assign function to role
      security:
        - bearerAuth: []
      description: Assign a function to a role with specified access level
      parameters:
        - name: roleId
          in: path
          description: ID of the role
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRoleFunctionLink'
      responses:
        '201':
          description: Successfully assigned
        '400':
          description: Invalid input
        '403':
          description: Insufficient permissions
        '404':
          description: Role or function not found
    get:
      tags:
        - AccountRole
      summary: Get functions assigned to role
      security:
        - bearerAuth: []
      description: Get all functions assigned to a specific role
      parameters:
        - name: roleId
          in: path
          description: ID of the role
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountRoleFunctionLink'
        '403':
          description: Insufficient permissions
        '404':
          description: Role not found
          
  /account/{accountId}/role:
    post:
      tags:
        - AccountRole
      summary: Assign role to account
      security:
        - bearerAuth: []
      description: Assign a role to an account
      parameters:
        - name: accountId
          in: path
          description: ID of the account
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRoleLink'
      responses:
        '201':
          description: Successfully assigned
        '400':
          description: Invalid input
        '403':
          description: Insufficient permissions
        '404':
          description: Account or role not found
    get:
      tags:
        - AccountRole
      summary: Get roles of account
      security:
        - bearerAuth: []
      description: Get all roles assigned to an account
      parameters:
        - name: accountId
          in: path
          description: ID of the account
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountRoleLink'
        '403':
          description: Insufficient permissions
        '404':
          description: Account not found
          
  /account/{accountId}/role/{roleId}:
    put:
      tags:
        - AccountRole
      summary: Update role assignment
      security:
        - bearerAuth: []
      description: Update the status of a role assigned to an account
      parameters:
        - name: accountId
          in: path
          description: ID of the account
          required: true
          schema:
            type: integer
        - name: roleId
          in: path
          description: ID of the role
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRoleLink'
      responses:
        '200':
          description: Successfully updated
        '400':
          description: Invalid input
        '403':
          description: Insufficient permissions
        '404':
          description: Account or role assignment not found
          
  # Business Management
  /business:
    post:
      tags:
        - Business
      summary: Create business
      security:
        - bearerAuth: []
      description: Create business
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Business'
      responses:
        '201':
          description: Successfully created
        '400':
          description: Invalid input
    get:
      tags:
        - Business
      summary: Get businesses
      security:
        - bearerAuth: []
      description: Get all businesses user has access to
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size for pagination
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Business'
        '403':
          description: Insufficient permissions
          
  /business/{id}:
    get:
      tags:
        - Business
      summary: Get business details
      security:
        - bearerAuth: []
      description: Get business information
      parameters:
        - name: id
          in: path
          description: ID of business
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Business'
        '403':
          description: Insufficient permissions
        '404':
          description: Business not found
    
  # Item Management
  /item:
    post:
      tags:
        - Item
      summary: Create item
      security:
        - bearerAuth: []
      description: Create item for current business
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '201':
          description: Successfully created
        '400':
          description: Invalid input
        '403':
          description: Insufficient permissions
    get:
      tags:
        - Item
      summary: Get items
      security:
        - bearerAuth: []
      description: Get all items of current business
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size for pagination
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemInfo'
        '403':
          description: Insufficient permissions
          
  /item/{id}:
    get:
      tags:
        - Item
      summary: Get item
      security:
        - bearerAuth: []
      description: Get item by id
      parameters:
        - name: id
          in: path
          description: ID of item
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemInfo'
        '403':
          description: Insufficient permissions
        '404':
          description: Item not found
    put:
      tags:
        - Item
      summary: Edit item
      security:
        - bearerAuth: []
      description: Edit item
      parameters:
        - name: id
          in: path
          description: ID of item to edit
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '403':
          description: Insufficient permissions
        '404':
          description: Item not found
          
  # Item Option Management
  /item-option:
    post:
      tags:
        - ItemOption
      summary: Create item option
      security:
        - bearerAuth: []
      description: Create a new item option
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemOption'
      responses:
        '201':
          description: Successfully created
        '400':
          description: Invalid input
        '403':
          description: Insufficient permissions
    get:
      tags:
        - ItemOption
      summary: Get item options
      security:
        - bearerAuth: []
      description: Get all item options
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size for pagination
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemOption'
        '403':
          description: Insufficient permissions
          
  /item-option/{id}:
    get:
      tags:
        - ItemOption
      summary: Get item option
      security:
        - bearerAuth: []
      description: Get item option by id
      parameters:
        - name: id
          in: path
          description: ID of item option
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemOption'
        '403':
          description: Insufficient permissions
        '404':
          description: Item option not found
    put:
      tags:
        - ItemOption
      summary: Update item option
      security:
        - bearerAuth: []
      description: Update an item option
      parameters:
        - name: id
          in: path
          description: ID of item option
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemOption'
      responses:
        '200':
          description: Successfully updated
        '400':
          description: Invalid input
        '403':
          description: Insufficient permissions
        '404':
          description: Item option not found
          
  # Order Management
  /order:
    post:
      tags:
        - Order
      summary: Create order
      security:
        - bearerAuth: []
      description: Create a new order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderInfo'
        '400':
          description: Invalid input
        '403':
          description: Insufficient permissions
    get:
      tags:
        - Order
      summary: Get orders
      security:
        - bearerAuth: []
      description: Get all orders
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size for pagination
          required: false
          schema:
            type: integer
        - name: status
          in: query
          description: Filter by order status
          required: false
          schema:
            type: string
            enum:
              - Open
              - Closed
              - Paid
              - Confirmed
              - Completed
              - Refunded
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderInfo'
        '403':
          description: Insufficient permissions
          
  /order/{id}:
    get:
      tags:
        - Order
      summary: Get order
      security:
        - bearerAuth: []
      description: Get order by id
      parameters:
        - name: id
          in: path
          description: ID of order
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderInfo'
        '403':
          description: Insufficient permissions
        '404':
          description: Order not found
    put:
      tags:
        - Order
      summary: Update order
      security:
        - bearerAuth: []
      description: Update order details (status, etc.)
      parameters:
        - name: id
          in: path
          description: ID of order
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderUpdate'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '403':
          description: Insufficient permissions
        '404':
          description: Order not found
          
  /order/{id}/item:
    post:
      tags:
        - Order
      summary: Add item to order
      security:
        - bearerAuth: []
      description: Add an item to an existing order
      parameters:
        - name: id
          in: path
          description: ID of order
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItem'
      responses:
        '201':
          description: Successfully added
        '400':
          description: Invalid input
        '403':
          description: Insufficient permissions or order in final state
        '404':
          description: Order or item not found
    get:
      tags:
        - Order
      summary: Get order items
      security:
        - bearerAuth: []
      description: Get all items in an order
      parameters:
        - name: id
          in: path
          description: ID of order
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderItem'
        '403':
          description: Insufficient permissions
        '404':
          description: Order not found
          
  /order/{orderId}/item/{itemId}:
    put:
      tags:
        - Order
      summary: Update order item
      security:
        - bearerAuth: []
      description: Update an item in an order
      parameters:
        - name: orderId
          in: path
          description: ID of order
          required: true
          schema:
            type: integer
        - name: itemId
          in: path
          description: ID of order item entry
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItem'
      responses:
        '200':
          description: Successfully updated
        '400':
          description: Invalid input
        '403':
          description: Insufficient permissions or order in final state
        '404':
          description: Order or item not found
    delete:
      tags:
        - Order
      summary: Remove item from order
      security:
        - bearerAuth: []
      description: Remove an item from an order
      parameters:
        - name: orderId
          in: path
          description: ID of order
          required: true
          schema:
            type: integer
        - name: itemId
          in: path
          description: ID of order item entry
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully removed
        '403':
          description: Insufficient permissions or order in final state
        '404':
          description: Order or item not found

  /order/{orderId}/item/{itemId}/option:
    post:
      tags:
        - Order
      summary: Add option to order item
      security:
        - bearerAuth: []
      description: Add an option to an item in an order
      parameters:
        - name: orderId
          in: path
          description: ID of order
          required: true
          schema:
            type: integer
        - name: itemId
          in: path
          description: ID of order item entry
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemOptionLink'
      responses:
        '201':
          description: Successfully added
        '400':
          description: Invalid input
        '403':
          description: Insufficient permissions or order in final state
        '404':
          description: Order, item or option not found
    get:
      tags:
        - Order
      summary: Get item options in order
      security:
        - bearerAuth: []
      description: Get all options for an item in an order
      parameters:
        - name: orderId
          in: path
          description: ID of order
          required: true
          schema:
            type: integer
        - name: itemId
          in: path
          description: ID of order item entry
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemOptionLink'
        '403':
          description: Insufficient permissions
        '404':
          description: Order or item not found

  /order/{orderId}/item/{itemId}/option/{optionId}:
    delete:
      tags:
        - Order
      summary: Remove option from order item
      security:
        - bearerAuth: []
      description: Remove an option from an item in an order
      parameters:
        - name: orderId
          in: path
          description: ID of order
          required: true
          schema:
            type: integer
        - name: itemId
          in: path
          description: ID of order item entry
          required: true
          schema:
            type: integer
        - name: optionId
          in: path
          description: ID of item option
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully removed
        '403':
          description: Insufficient permissions or order in final state
        '404':
          description: Order, item or option not found
          
  # Service Management
  /service:
    post:
      tags:
        - Service
      summary: Create service
      security:
        - bearerAuth: []
      description: Create a new service
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '201':
          description: Successfully created
        '400':
          description: Invalid input
        '403':
          description: Insufficient permissions
    get:
      tags:
        - Service
      summary: Get services
      security:
        - bearerAuth: []
      description: Get all services
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size for pagination
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceInfo'
        '403':
          description: Insufficient permissions
          
  /service/{id}:
    get:
      tags:
        - Service
      summary: Get service
      security:
        - bearerAuth: []
      description: Get service by id
      parameters:
        - name: id
          in: path
          description: ID of service
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceInfo'
        '403':
          description: Insufficient permissions
        '404':
          description: Service not found
    put:
      tags:
        - Service
      summary: Update service
      security:
        - bearerAuth: []
      description: Update service details
      parameters:
        - name: id
          in: path
          description: ID of service
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '200':
          description: Successfully updated
        '400':
          description: Invalid input
        '403':
          description: Insufficient permissions
        '404':
          description: Service not found
          
  # Reservation Management
  /reservation:
    post:
      tags:
        - Reservation
      summary: Create reservation
      security:
        - bearerAuth: []
      description: Create a new reservation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
      responses:
        '201':
          description: Successfully created
        '400':
          description: Invalid input
        '403':
          description: Insufficient permissions
    get:
      tags:
        - Reservation
      summary: Get reservations
      security:
        - bearerAuth: []
      description: Get all reservations
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size for pagination
          required: false
          schema:
            type: integer
        - name: status
          in: query
          description: Filter by reservation status
          required: false
          schema:
            type: string
            enum:
              - Open
              - Closed
              - Paid
              - Confirmed
              - Completed
              - Refunded
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReservationInfo'
        '403':
          description: Insufficient permissions
          
  /reservation/{id}:
    get:
      tags:
        - Reservation
      summary: Get reservation
      security:
        - bearerAuth: []
      description: Get reservation by id
      parameters:
        - name: id
          in: path
          description: ID of reservation
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationInfo'
        '403':
          description: Insufficient permissions
        '404':
          description: Reservation not found
    put:
      tags:
        - Reservation
      summary: Update reservation
      security:
        - bearerAuth: []
      description: Update reservation details
      parameters:
        - name: id
          in: path
          description: ID of reservation
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
      responses:
        '200':
          description: Successfully updated
        '400':
          description: Invalid input
        '403':
          description: Insufficient permissions
        '404':
          description: Reservation not found
          
  # Payment Management
  /payment:
    post:
      tags:
        - Payment
      summary: Create payment
      security:
        - bearerAuth: []
      description: Create a payment for an order or reservation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
      responses:
        '201':
          description: Successfully created
        '400':
          description: Invalid input
        '403':
          description: Insufficient permissions
        '404':
          description: Order or reservation not found
    get:
      tags:
        - Payment
      summary: Get payments
      security:
        - bearerAuth: []
      description: Get all payments
      parameters:
        - name: orderId
          in: query
          description: Filter by order ID
          required: false
          schema:
            type: integer
        - name: reservationId
          in: query
          description: Filter by reservation ID
          required: false
          schema:
            type: integer
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size for pagination
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
        '403':
          description: Insufficient permissions
          
  # Price Modifier Management
  /price-modifier:
    post:
      tags:
        - PriceModifier
      summary: Create price modifier
      security:
        - bearerAuth: []
      description: Create a new price modifier (tax or discount)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceModifier'
      responses:
        '201':
          description: Successfully created
        '400':
          description: Invalid input
        '403':
          description: Insufficient permissions
    get:
      tags:
        - PriceModifier
      summary: Get price modifiers
      security:
        - bearerAuth: []
      description: Get all price modifiers
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size for pagination
          required: false
          schema:
            type: integer
        - name: type
          in: query
          description: Filter by modifier type
          required: false
          schema:
            type: string
            enum:
              - flat_tax
              - rate_tax
              - flat_discount
              - rate_discount
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PriceModifierInfo'
        '403':
          description: Insufficient permissions
          
  /price-modifier/{id}:
    get:
      tags:
        - PriceModifier
      summary: Get price modifier
      security:
        - bearerAuth: []
      description: Get price modifier by id
      parameters:
        - name: id
          in: path
          description: ID of price modifier
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceModifierInfo'
        '403':
          description: Insufficient permissions
        '404':
          description: Price modifier not found
    put:
      tags:
        - PriceModifier
      summary: Update price modifier
      security:
        - bearerAuth: []
      description: Update price modifier details
      parameters:
        - name: id
          in: path
          description: ID of price modifier
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceModifier'
      responses:
        '200':
          description: Successfully updated
        '400':
          description: Invalid input
        '403':
          description: Insufficient permissions
        '404':
          description: Price modifier not found
          
  /order/{orderId}/price-modifier:
    post:
      tags:
        - PriceModifier
      summary: Apply price modifier to order
      security:
        - bearerAuth: []
      description: Apply a price modifier to an order
      parameters:
        - name: orderId
          in: path
          description: ID of order
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceModifierOrderLink'
      responses:
        '201':
          description: Successfully applied
        '400':
          description: Invalid input
        '403':
          description: Insufficient permissions or order in final state
        '404':
          description: Order or price modifier not found
          
  /reservation/{reservationId}/price-modifier:
    post:
      tags:
        - PriceModifier
      summary: Apply price modifier to reservation
      security:
        - bearerAuth: []
      description: Apply a price modifier to a reservation
      parameters:
        - name: reservationId
          in: path
          description: ID of reservation
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceModifierReservationLink'
      responses:
        '201':
          description: Successfully applied
        '400':
          description: Invalid input
        '403':
          description: Insufficient permissions or reservation in final state
        '404':
          description: Reservation or price modifier not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Account:
      type: object
      properties:
        id:
          type: integer
          example: 10
        username:
          type: string
          example: "theUser"
        name:
          type: string
          example: "John Doe"
        businessId:
          type: integer
          example: 2
          description: Identifier of the business this account belongs to
    AuthToken:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
    LogInInfo:
      type: object
      properties:
        username:
          type: string
          example: "theUser"
        password:
          type: string
          example: "thePassword"
    AccountRole:
      type: object
      properties:
        id:
          type: integer
          example: 3
        name:
          type: string
          example: "Manager"
        businessId:
          type: integer
          example: 2
    Function:
      type: object
      properties:
        id:
          type: integer
          example: 5
        name:
          type: string
          example: "OrderManagement"
        description:
          type: string
          example: "Ability to create and modify orders"
    AccountRoleFunctionLink:
      type: object
      properties:
        roleId:
          type: integer
          example: 3
        functionId:
          type: integer
          example: 5
        accessLevel:
          type: string
          enum:
            - view
            - initiate
          example: "initiate"
    AccountRoleLink:
      type: object
      properties:
        accountId:
          type: integer
          example: 10
        roleId:
          type: integer
          example: 3
        status:
          type: string
          enum:
            - Active
            - Suspended
            - Deactivated
          example: "Active"
    Business:
      type: object
      properties:
        id:
          type: integer
          example: 4
        name:
          type: string
          example: "Bakery"
        type:
          type: string
          enum:
            - catering
            - beauty
          example: "catering"
        ownerId:
          type: integer
          description: ID of the account that owns this business
          example: 10
    Item:
      type: object
      properties:
        name:
          type: string
          example: "Cake"
        price:
          type: number
          format: double
          example: 14.59
    ItemInfo:
      type: object
      properties:
        id:
          type: integer
          example: 2
        businessId:
          type: integer
          example: 6
        name:
          type: string
          example: "Cake"
        price:
          type: number
          format: double
          example: 14.59
    ItemOption:
      type: object
      properties:
        name:
          type: string
          example: "cream"
        priceModifier:
          type: number
          format: double
          example: 1.00
          description: Amount to modify the item price (positive for increase, negative for decrease, zero for no change)
    OrderUpdate:
      type: object
      properties:
        status:
          type: string
          enum:
            - Open
            - Closed
            - Paid
            - Confirmed
            - Completed
            - Refunded
        tipAmount:
          type: number
          format: double
          example: 1.50
        serviceCharge:
          type: number
          format: double
          example: 2.00
    Order:
      type: object
      properties:
        status:
          type: string
          enum:
            - Open
            - Closed
            - Paid
            - Confirmed
            - Completed
            - Refunded
          example: "Open"
        tipAmount:
          type: number
          format: double
          example: 1.50
        serviceCharge:
          type: number
          format: double
          example: 2.00
    OrderInfo:
      type: object
      properties:
        id:
          type: integer
          example: 2
        businessId:
          type: integer
          example: 6
        workerId:
          type: integer
          example: 6
        datePlaced:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        status:
          type: string
          enum:
            - Open
            - Closed
            - Paid
            - Confirmed
            - Completed
            - Refunded
        tipAmount:
          type: number
          format: double
          example: 1.50
        serviceCharge:
          type: number
          format: double
          example: 2.00
        totalAmount:
          type: number
          format: double
          example: 30.59
    OrderItem:
      type: object
      properties:
        itemId:
          type: integer
          example: 2
        count:
          type: integer
          example: 1
        options:
          type: array
          items:
            type: object
            properties:
              optionId:
                type: integer
                example: 1
              count:
                type: integer
                example: 1
    ItemOptionLink:
      type: object
      properties:
        optionId:
          type: integer
          example: 1
        count:
          type: integer
          example: 1
    Service:
      type: object
      properties:
        name:
          type: string
          example: "Massage"
        price:
          type: number
          format: double
          example: 14.59
          description: Hourly price
        serviceCharge:
          type: number
          format: double
          example: 2.00
        workerId:
          type: integer
          example: 5
          description: ID of the worker who performs this service
    ServiceInfo:
      type: object
      properties:
        id:
          type: integer
          example: 1
        businessId:
          type: integer
          example: 2
        name:
          type: string
          example: "Massage"
        price:
          type: number
          format: double
          example: 14.59
        serviceCharge:
          type: number
          format: double
          example: 2.00
        workerId:
          type: integer
          example: 5
    Reservation:
      type: object
      properties:
        dateOfService:
          type: string
          format: date-time
          example: "2024-01-17T12:00:00Z"
        reservationLength:
          type: integer
          example: 60
          description: Length in minutes
        serviceId:
          type: integer
          example: 3
        status:
          type: string
          enum:
            - Open
            - Closed
            - Paid
            - Confirmed
            - Completed
            - Refunded
        tipAmount:
          type: number
          format: double
          example: 1.50
        servicingWorkerId:
          type: integer
          example: 5
        customer:
          type: string
          example: "John Doe"
    ReservationInfo:
      type: object
      properties:
        id:
          type: integer
          example: 2
        businessId:
          type: integer
          example: 6
        workerId:
          type: integer
          example: 6
        datePlaced:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        dateOfService:
          type: string
          format: date-time
          example: "2024-01-17T12:00:00Z"
        reservationLength:
          type: integer
          example: 60
        serviceId:
          type: integer
          example: 3
        status:
          type: string
          enum:
            - Open
            - Closed
            - Paid
            - Confirmed
            - Completed
            - Refunded
        tipAmount:
          type: number
          format: double
          example: 1.50
        servicingWorkerId:
          type: integer
          example: 5
        customer:
          type: string
          example: "John Doe"
        totalAmount:
          type: number
          format: double
          example: 14.59
    PriceModifier:
      type: object
      properties:
        name:
          type: string
          example: "Holiday Sale"
        value:
          type: number
          format: double
          example: 15.00
        type:
          type: string
          enum:
            - flat_tax
            - rate_tax
            - flat_discount
            - rate_discount
          example: "rate_discount"
    PriceModifierInfo:
      type: object
      properties:
        id:
          type: integer
          example: 1
        businessId:
          type: integer
          example: 2
        name:
          type: string
          example: "Holiday Sale"
        value:
          type: number
          format: double
          example: 15.00
        type:
          type: string
          enum:
            - flat_tax
            - rate_tax
            - flat_discount
            - rate_discount
          example: "rate_discount"
    PriceModifierOrderLink:
      type: object
      properties:
        orderId:
          type: integer
          example: 2
        modifierId:
          type: integer
          example: 1
        itemId:
          type: integer
          example: 3
          description: Optional - if specified, applies only to this item
    PriceModifierReservationLink:
      type: object
      properties:
        reservationId:
          type: integer
          example: 2
        modifierId:
          type: integer
          example: 1
    Payment:
      type: object
      properties:
        amount:
          type: number
          format: double
          example: 20.00
        method:
          type: string
          enum:
            - cash
            - card
            - gift_card
          example: "card"
        orderId:
          type: integer
          example: 2
          description: ID of order this payment is for (either orderId or reservationId must be provided)
        reservationId:
          type: integer
          example: null
          description: ID of reservation this payment is for (either orderId or reservationId must be provided)
        cardInfo:
          type: object
          properties:
            last4:
              type: string
              example: "1234"
            cardType:
              type: string
              example: "Visa"
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:35:00Z"

