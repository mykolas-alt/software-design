openapi: 3.0.4
info:
  title: API Requests
  version: 1.0.0
paths:
  /worker:
    post:
      tags:
        - Worker
      summary: Create account
      description: Create worker account
      parameters:
        - name: username
          in: query
          description: Username of account that will be created
          required: true
          schema:
            type: string
        - name: Name
          in: query
          description: Name of account that will be created
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Password of account that will be created
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successfully created
        '400':
          description: Invalid input
  /worker/login:
    post:
      tags:
        - Worker
      summary: Log in
      description: Log in to worker account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogInInfo'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '401':
          description: Invalid password
        '404':
          description: Account not found
  /worker/{username}:
    get:
      tags:
        - Worker
      summary: Get account
      description: Get worker account information
      parameters:
        - name: username
          in: path
          description: Username of account
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Worker'
        '400':
          description: Invalid username supplied
        '404':
          description: Account not found
  /worker/{id}/role:
    post:
      tags:
        - Worker
      summary: Add role
      security:
        - bearerAuth: []
      description: Add role to worker account
      parameters:
        - name: id
          in: path
          description: Id of account to which role will be added
          required: true
          schema:
            type: integer
        - name: roleId
          in: query
          description: Role to be added to account
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '403':
          description: Modifier does not have permission to add role
        '404':
          description: Role not found
  /worker/{id}/role/{roleId}:
    put:
      tags:
        - Worker
      summary: Change role
      security:
        - bearerAuth: []
      description: Change role of worker account
      parameters:
        - name: id
          in: path
          description: Id of account
          required: true
          schema:
            type: integer
        - name: roleId
          in: path
          description: Id of role in account
          required: true
          schema:
            type: integer
        - name: newRoleId
          in: query
          description: New role id that will replace old role
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid username supplied
        '403':
          description: Modifier does not have permission to change role
        '404':
          description: Role not found

  /business:
    post:
      tags:
        - Business
      summary: Create business
      security:
        - bearerAuth: []
      description: Create business
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Business'
      responses:
        '201':
          description: Successfully created
        '400':
          description: Invalid input
  /business/{id}:
    get:
      tags:
        - Business
      summary: Get business
      security:
        - bearerAuth: []
      description: Get business information
      parameters:
        - name: id
          in: path
          description: Id of business
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessInfo'
        '400':
          description: Invalid input
  /{businessId}/business/{id}:
    put:
      tags:
        - Business
      summary: Add worker
      security:
        - bearerAuth: []
      description: Add worker to business
      parameters:
        - name: businessId
          in: path
          description: Id of business for which worker will be added
          required: true
          schema:
            type: integer
        - name: id
          in: path
          description: Id of worker account
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '403':
          description: Modifier does not have permission to add worker
        '404':
          description: Worker not found

  /{businessId}/role:
    post:
      tags:
        - Role
      summary: Create role
      security:
        - bearerAuth: []
      description: Create new role
      parameters:
        - name: businessId
          in: path
          description: Id of business for which role will be created
          required: true
          schema:
            type: integer
        - name: name
          in: query
          description: Name of role that will be created
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successfully created
        '400':
          description: Invalid input
        '403':
          description: Modifier does not have permission to create role
    get:
      tags:
        - Role
      summary: Get roles
      security:
        - bearerAuth: []
      description: Get all roles of business
      parameters:
        - name: businessId
          in: path
          description: Id of business from which role information will be taken
          required: true
          schema:
            type: integer
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size for pagination
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '400':
          description: Invalid input

  /{businessId}/item:
    post:
      tags:
        - Item
      summary: Create item
      security:
        - bearerAuth: []
      description: Create item for business
      parameters:
        - name: businessId
          in: path
          description: Id of business for which item will be created
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '201':
          description: Successfully created
        '400':
          description: Invalid input
        '403':
          description: Modifier does not have permission to create item
    get:
      tags:
        - Item
      summary: Get items
      security:
        - bearerAuth: []
      description: Get all items of business
      parameters:
        - name: businessId
          in: path
          description: Id of business from which item information will be taken
          required: true
          schema:
            type: integer
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size for pagination
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemInfo'
        '400':
          description: Invalid input
  /{businessId}/item/{id}:
    get:
      tags:
        - Item
      summary: Get item
      security:
        - bearerAuth: []
      description: Get item by id
      parameters:
        - name: businessId
          in: path
          description: Id of business from which item information will be taken
          required: true
          schema:
            type: integer
        - name: id
          in: path
          description: Id of item which information will be taken
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemInfo'
        '400':
          description: Invalid input
        '404':
          description: Item not found
    put:
      tags:
        - Item
      summary: Edit item
      security:
        - bearerAuth: []
      description: Edit item from business
      parameters:
        - name: businessId
          in: path
          description: Id of business from which item information will be taken
          required: true
          schema:
            type: integer
        - name: id
          in: path
          description: Id of item which information will be changed
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '403':
          description: Modifier does not have permission to change item
        '404':
          description: Item not found

  /{businessId}/order:
    post:
      tags:
        - Order
      summary: Create order
      security:
        - bearerAuth: []
      description: Create order for business
      parameters:
        - name: businessId
          in: path
          description: Id of business for which order will be created
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Successfully created
        '400':
          description: Invalid input
    get:
      tags:
        - Order
      summary: Get orders
      security:
        - bearerAuth: []
      description: Get all orders of business
      parameters:
        - name: businessId
          in: path
          description: Id of business from which order information will be taken
          required: true
          schema:
            type: integer
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size for pagination
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderInfo'
        '400':
          description: Invalid input
  /{businessId}/order/{id}:
    get:
      tags:
        - Order
      summary: Get order
      security:
        - bearerAuth: []
      description: Get order by id
      parameters:
        - name: businessId
          in: path
          description: Id of business from which order information will be taken
          required: true
          schema:
            type: integer
        - name: id
          in: path
          description: Id of order which information will be taken
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderInfo'
        '400':
          description: Invalid input
        '404':
          description: Order not found
    put:
      tags:
        - Order
      summary: Edit order
      security:
        - bearerAuth: []
      description: Edit order from business
      parameters:
        - name: businessId
          in: path
          description: Id of business from which order information will be taken
          required: true
          schema:
            type: integer
        - name: id
          in: path
          description: Id of order which information will be changed
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '404':
          description: Order not found

  /{businessId}/service:
    post:
      tags:
        - Service
      summary: Create service
      security:
        - bearerAuth: []
      description: Create service for business
      parameters:
        - name: businessId
          in: path
          description: Id of business for which service will be created
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '201':
          description: Successfully created
        '400':
          description: Invalid input
        '403':
          description: Modifier does not have permission to create service
    get:
      tags:
        - Service
      summary: Get services
      security:
        - bearerAuth: []
      description: Get all services of business
      parameters:
        - name: businessId
          in: path
          description: Id of business from which service information will be taken
          required: true
          schema:
            type: integer
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size for pagination
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceInfo'
        '400':
          description: Invalid input
  /{businessId}/service/{id}:
    get:
      tags:
        - Service
      summary: Get service
      security:
        - bearerAuth: []
      description: Get service by id
      parameters:
        - name: businessId
          in: path
          description: Id of business from which service information will be taken
          required: true
          schema:
            type: integer
        - name: id
          in: path
          description: Id of servicec which information will be taken
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceInfo'
        '400':
          description: Invalid input
        '404':
          description: Service not found
    put:
      tags:
        - Service
      summary: Edit service
      security:
        - bearerAuth: []
      description: Edit service from business
      parameters:
        - name: businessId
          in: path
          description: Id of business from which service information will be taken
          required: true
          schema:
            type: integer
        - name: id
          in: path
          description: Id of service which information will be changed
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '403':
          description: Modifier does not have permission to change service
        '404':
          description: Service not found

  /{businessId}/reservation:
    post:
      tags:
        - Reservation
      summary: Create reservation
      security:
        - bearerAuth: []
      description: Create reservation for business
      parameters:
        - name: businessId
          in: path
          description: Id of business for which reservation will be created
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
      responses:
        '201':
          description: Successfully created
        '400':
          description: Invalid input
    get:
      tags:
        - Reservation
      summary: Get reservations
      security:
        - bearerAuth: []
      description: Get all reservations of business
      parameters:
        - name: businessId
          in: path
          description: Id of business from which reservation information will be taken
          required: true
          schema:
            type: integer
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size for pagination
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReservationInfo'
        '400':
          description: Invalid input
  /{businessId}/reservation/{id}:
    get:
      tags:
        - Reservation
      summary: Get reservation
      security:
        - bearerAuth: []
      description: Get reservation by id
      parameters:
        - name: businessId
          in: path
          description: Id of business from which reservation information will be taken
          required: true
          schema:
            type: integer
        - name: id
          in: path
          description: Id of reservation which information will be taken
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationInfo'
        '400':
          description: Invalid input
        '404':
          description: Reservation not found
    put:
      tags:
        - Reservation
      summary: Edit reservation
      security:
        - bearerAuth: []
      description: Edit reservation from business
      parameters:
        - name: businessId
          in: path
          description: Id of business from which reservation information will be taken
          required: true
          schema:
            type: integer
        - name: id
          in: path
          description: Id of reservation which information will be changed
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '404':
          description: Reservation not found

  /{businessId}/discount:
    post:
      tags:
        - Discount
      summary: Create discount
      security:
        - bearerAuth: []
      description: Create discount for business
      parameters:
        - name: businessId
          in: path
          description: Id of business for which discount will be created
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Discount'
      responses:
        '201':
          description: Successfully created
        '400':
          description: Invalid input
        '403':
          description: Modifier does not have permission to create discount
    get:
      tags:
        - Discount
      summary: Get discounts
      security:
        - bearerAuth: []
      description: Get all discounts of business
      parameters:
        - name: businessId
          in: path
          description: Id of business from which discount information will be taken
          required: true
          schema:
            type: integer
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size for pagination
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscountInfo'
        '400':
          description: Invalid input
  /{businessId}/discount/{id}:
    get:
      tags:
        - Discount
      summary: Get discount
      security:
        - bearerAuth: []
      description: Get discount by id
      parameters:
        - name: businessId
          in: path
          description: Id of business from which discount information will be taken
          required: true
          schema:
            type: integer
        - name: id
          in: path
          description: Id of discount which information will be taken
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscountInfo'
        '400':
          description: Invalid input
        '404':
          description: Discount not found
    put:
      tags:
        - Discount
      summary: Edit discount
      security:
        - bearerAuth: []
      description: Edit discount from business
      parameters:
        - name: businessId
          in: path
          description: Id of business from which discount information will be taken
          required: true
          schema:
            type: integer
        - name: id
          in: path
          description: Id of discount which information will be changed
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Discount'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '403':
          description: Modifier does not have permission to change discount
        '404':
          description: Discount not found

  /{businessId}/tax:
    post:
      tags:
        - Tax
      summary: Create tax
      security:
        - bearerAuth: []
      description: Create tax for business
      parameters:
        - name: businessId
          in: path
          description: Id of business for which tax will be created
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tax'
      responses:
        '201':
          description: Successfully created
        '400':
          description: Invalid input
        '403':
          description: Modifier does not have permission to create tax
    get:
      tags:
        - Tax
      summary: Get taxes
      description: Get all taxes of business
      parameters:
        - name: businessId
          in: path
          description: Id of business from which tax information will be taken
          required: true
          schema:
            type: integer
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size for pagination
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaxInfo'
        '400':
          description: Invalid input
  /{businessId}/tax/{id}:
    get:
      tags:
        - Tax
      summary: Get tax
      description: Get tax by id
      parameters:
        - name: businessId
          in: path
          description: Id of business from which tax information will be taken
          required: true
          schema:
            type: integer
        - name: id
          in: path
          description: Id of tax which information will be taken
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxInfo'
        '400':
          description: Invalid input
        '404':
          description: Tax not found
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Worker:
      type: object
      properties:
        id:
          type: integer
          example: 10
        username:
          type: string
          example: "theUser"
        name:
          type: string
          example: "John Doe"
        businessId:
          type: integer
          example: 2
        roles:
          type: array
          items:
            type: object
            example:
              - Cashier
              - Barista
    LogInInfo:
      type: object
      properties:
        username:
          type: string
          example: "theUser"
        password:
          type: string
          example: "thePassword"
    Role:
      type: object
      properties:
        id:
          type: integer
          example: 3
        name:
          type: string
          example: Manager
    Business:
      type: object
      properties:
        name:
          type: string
          example: Bakery
        ownerId:
          type: integer
          example: 10
        type:
          type: string
          example: catering
        address:
          type: string
          example: "123 Main St, Cityville"
        phone:
          type: string
          example: "+1-555-1234"
        email:
          type: string
          example: "jonhdoe@gmail.com"
    BusinessInfo:
      type: object
      properties:
        id:
          type: integer
          example: 4
        name:
          type: string
          example: Bakery
        ownerId:
          type: integer
          example: 10
        type:
          type: string
          example: catering
        address:
          type: string
          example: "123 Main St, Cityville"
        phone:
          type: string
          example: "+1-555-1234"
        email:
          type: string
          example: "jonhdoe@gmail.com"
    Item:
      type: object
      properties:
        businessId:
          type: integer
          example: 6
        name:
          type: string
          example: Cake
        price:
          type: integer
          example: 14.59
        options:
          type: array
          items:
            type: object
            example:
              - {name: cream, extraCost: 1.00}
              - {name: strawberry, extraCost: 1.50}
    ItemInfo:
      type: object
      properties:
        id:
          type: integer
          example: 2
        businessId:
          type: integer
          example: 6
        name:
          type: string
          example: Cake
        price:
          type: integer
          example: 14.59
        options:
          type: array
          items:
            type: object
            example:
              - {name: cream, extraCost: 1.00}
              - {name: strawberry, extraCost: 1.50}
    Order:
      type: object
      properties:
        workerId:
          type: integer
          example: 6
        status:
          type: string
          enum:
            - Open
            - Closed
            - Paid
        tipAmount:
          type: integer
          example: 1.50
        serviceCharge:
          type: integer
          example: 2.00
        items:
          type: array
          items:
            type: object
            example:
              - {itemId: 2, count: 1, options: [cream]}
              - {itemId: 3, count: 2, options: [no sugar]}
    OrderInfo:
      type: object
      properties:
        id:
          type: integer
          example: 2
        workerId:
          type: integer
          example: 6
        datePlaced:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        status:
          type: string
          enum:
            - Open
            - Closed
            - Paid
        tipAmount:
          type: integer
          example: 1.50
        serviceCharge:
          type: integer
          example: 2.00
        items:
          type: array
          items:
            type: object
            example:
              - {itemId: 2, count: 1, options: [cream]}
              - {itemId: 3, count: 2, options: [no sugar]}
    Service:
      type: object
      properties:
        businessId:
          type: integer
          example: 2
        name:
          type: string
          example: Massage
        price:
          type: integer
          example: 14.59
        serviceCharge:
          type: integer
          example: 2.00
        workerId:
          type: integer
          example: 5
    ServiceInfo:
      type: object
      properties:
        id:
          type: integer
          example: 1
        businessId:
          type: integer
          example: 2
        name:
          type: string
          example: Massage
        price:
          type: integer
          example: 14.59
        serviceCharge:
          type: integer
          example: 2.00
        workerId:
          type: integer
          example: 5
    Reservation:
      type: object
      properties:
        workerId:
          type: integer
          example: 6
        dateOfService:
          type: string
          format: date-time
          example: "2024-01-17T12:00:00Z"
        reservationLength:
          type: integer
          example: 60
        serviceId:
          type: integer
          example: 3
        status:
          type: string
          enum:
            - Open
            - Closed
            - Paid
        tipAmount:
          type: integer
          example: 1.50
        servicingWorkerId:
          type: integer
          example: 5
        customer:
          type: string
          example: "John Doe"
    ReservationInfo:
      type: object
      properties:
        id:
          type: integer
          example: 2
        workerId:
          type: integer
          example: 6
        datePlaced:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        dateOfService:
          type: string
          format: date-time
          example: "2024-01-17T12:00:00Z"
        reservationLength:
          type: integer
          example: 60
        serviceId:
          type: integer
          example: 3
        status:
          type: string
          enum:
            - Open
            - Closed
            - Paid
        tipAmount:
          type: integer
          example: 1.50
        servicingWorkerId:
          type: integer
          example: 5
        customer:
          type: string
          example: "John Doe"
    Discount:
      type: object
      properties:
        businessId:
          type: integer
          example: 2
        name:
          type: string
          example: "Holiday Sale"
        rate:
          type: integer
          example: 15
        validFrom:
          type: string
          format: date-time
          example: "2024-12-01T00:00:00Z"
        validTo:
          type: string
          format: date-time
          example: "2024-12-31T23:59:59Z"
    DiscountInfo:
      type: object
      properties:
        id:
          type: integer
          example: 1
        businessId:
          type: integer
          example: 2
        name:
          type: string
          example: "Holiday Sale"
        rate:
          type: integer
          example: 15
        validFrom:
          type: string
          format: date-time
          example: "2024-12-01T00:00:00Z"
        validTo:
          type: string
          format: date-time
          example: "2024-12-31T23:59:59Z"
    Tax:
      type: object
      properties:
        businessId:
          type: integer
          example: 5
        name:
          type: string
          example: "Sales Tax"
        rate:
          type: integer
          example: 15
    TaxInfo:
      type: object
      properties:
        id:
          type: integer
          example: 4
        businessId:
          type: integer
          example: 5
        name:
          type: string
          example: "Sales Tax"
        rate:
          type: integer
          example: 15